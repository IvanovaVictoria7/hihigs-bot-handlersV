import logging
from aiogram import types, Router
from aiogram.filters import Command
from sqlalchemy import select, insert
from db import async_session, User, Profile, Task, Subscription
from .keyboard import keyboard_start

router = Router()

@router.message(Command(commands=["start"]))
async def command_start_handler(message: types.Message):
    async with async_session() as session:
        query = select(User).where(User.user_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar()
        if user:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: /status")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=keyboard_start)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


@router.message(Command(commands=["status"]))
async def command_status_handler(message: types.Message):
    async with async_session() as session:
        query = select(User).where(User.user_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start")
            return

        info = f"UserId: {user.user_id}\nUserName: {user.user_name}"
        if user.tutorcode:
            info += f"\n–ö–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {user.tutorcode}"
        elif user.subscribe:
            query = select(User).where(User.tutorcode == user.subscribe)
            result = await session.execute(query)
            tutor = result.scalar()
            tutor_name = tutor.user_name if tutor else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            info += f"\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {tutor_name}"
        info += "\n\n–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å Codewars-–ø—Ä–æ—Ñ–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/load <url1>, <url2>, ..."

        await message.answer(info)
    logging.info(f"–°—Ç–∞—Ç—É—Å –¥–ª—è {message.from_user.id}")


@router.message(Command("load"))
async def command_load_handler(message: types.Message):
    async with async_session() as session:
        query = select(User).where(User.user_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar()

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
            return

        text = message.text.replace("/load", "").strip()
        urls = [url.strip() for url in text.split(",") if url.strip()]

        if not urls:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω URL –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return

        existing_query = select(Profile.profile_url).where(Profile.user_id == user.user_id)
        existing_result = await session.execute(existing_query)
        existing_urls = set(row[0] for row in existing_result.all())

        new_profiles = [
            Profile(user_id=user.user_id, profile_url=url)
            for url in urls if url not in existing_urls
        ]

        if not new_profiles:
            await message.answer("–≠—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏ —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.")
            return

        session.add_all(new_profiles)
        await session.commit()
        await message.answer(f" –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(new_profiles)}")


@router.message(Command("getres"))
async def command_getres_handler(message: types.Message):
    async with async_session() as session:
        query = select(User).where(User.user_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar()

        if not user or not user.tutorcode:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.")
            return

        subs = await session.execute(
            select(Subscription.student_id).where(Subscription.teacher_id == user.user_id)
        )
        student_ids = [row[0] for row in subs.all()]
        if not student_ids:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return

        profiles = await session.execute(
            select(Profile.id).where(Profile.user_id.in_(student_ids))
        )
        profile_ids = [row[0] for row in profiles.all()]
        if not profile_ids:
            await message.answer("–£ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.")
            return

        tasks_query = await session.execute(
            select(Task.task_name).where(Task.profile_id.in_(profile_ids))
        )
        tasks = sorted(set(row[0] for row in tasks_query.all()))

        if not tasks:
            await message.answer("–£ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        else:
            task_list = "\n".join(f"‚Ä¢ {task}" for task in tasks)
            await message.answer(f"–†–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n{task_list}")

    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –ø–æ /getres ‚Äî {message.from_user.id}")

    @router.message(Command("help"))
    async def help_handler(message: types.Message):
        await message.answer(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                  "/start - –ù–∞—á–∞—Ç—å\n"
                                  "/help - –°–ø—Ä–∞–≤–∫–∞\n"
                                  "/status - –°—Ç–∞—Ç—É—Å\n"
                                  "/load - –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ Codewars\n"
                                  "/getres - –ó–∞–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)")

    @router.message(lambda message: message.text.startswith("tutorcode-"))
    async def handle_tutorcode_input(message: types.Message):
        async with async_session() as session:
            code = message.text.split("-")[1]
            new_user = {
                "user_id": message.from_user.id,
                "user_name": message.from_user.username or "Unknown",
                "subscribe": code
            }
            await session.execute(insert(User).values(**new_user))
            await session.commit()
            await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: /status")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å")

    @router.message(lambda message: message.text == "üìñ –û –Ω–∞—Å")
    async def about_handler(message: types.Message):
        await message.answer("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å!")

    @router.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    async def profile_handler(message: types.Message):
        await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ID {message.from_user.id}")

    @router.message()
    async def echo_message(message: types.Message):
        logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é –∫–æ–º–∞–Ω–¥—É")
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")

        
