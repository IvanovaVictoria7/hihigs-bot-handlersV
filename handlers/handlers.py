import logging
from aiogram import types, Router
from aiogram.filters import Command
from sqlalchemy import select, insert
from .keyboard import keyboard_start
from db import async_session, User

router = Router()

@router.message(Command(commands=["start"]))
async def command_start_handler(message: types.Message):
    async with async_session() as session:
        query = select(User).where(User.user_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar()
        if user:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: /status")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=keyboard_start)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@router.message(Command(commands=["status"]))
async def command_status_handler(message: types.Message):
    async with async_session() as session:
        query = select(User).where(User.user_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start")
            return
        info = f"UserId: {user.user_id}\nUserName: {user.user_name}"
        if user.tutorcode:
            info += f"\n–ö–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {user.tutorcode}"
        elif user.subscribe:
            query = select(User).where(User.tutorcode == user.subscribe)
            result = await session.execute(query)
            tutor = result.scalar()
            tutor_name = tutor.user_name if tutor else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            info += f"\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {tutor_name}"
        await message.answer(info)
    logging.info(f"–°—Ç–∞—Ç—É—Å –¥–ª—è {message.from_user.id}")

@router.message(lambda message: message.text.startswith("tutorcode-"))
async def handle_tutorcode_input(message: types.Message):
    async with async_session() as session:
        code = message.text.split("-")[1]
        new_user = {
            "user_id": message.from_user.id,
            "user_name": message.from_user.username or "Unknown",
            "subscribe": code
        }
        await session.execute(insert(User).values(**new_user))
        await session.commit()
        await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: /status")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å")

@router.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/start - –ù–∞—á–∞—Ç—å\n"
                         "/help - –°–ø—Ä–∞–≤–∫–∞\n"
                         "/status - –°—Ç–∞—Ç—É—Å")

@router.message(lambda message: message.text == "üìñ –û –Ω–∞—Å")
async def about_handler(message: types.Message):
    await message.answer("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å!")

@router.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ID {message.from_user.id}")

@router.message()
async def echo_message(message:types.Message):
    logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={message.from_user.id} –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é –∫–æ–º–∞–Ω–¥—É ")
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.–í—ã–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")